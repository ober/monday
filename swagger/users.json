{
  "apiVersion": "v1",
  "swaggerVersion": "1.2",
  "resourcePath": "",
  "apis": [
    {
      "path": "/v1/users.{format}",
      "operations": [
        {
          "produces": [
            "application/json"
          ],
          "notes": "",
          "summary": "Get all users",
          "nickname": "GET--version-users---format-",
          "httpMethod": "GET",
          "parameters": [
            {
              "paramType": "query",
              "name": "page",
              "description": "<p>Page offset to fetch.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "per_page",
              "description": "<p>Number of results to return per page.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "offset",
              "description": "<p>Pad a number of results.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "order_by_latest",
              "description": "<p>Order by newest users.</p>\n",
              "type": "Boolean",
              "dataType": "Boolean",
              "required": false
            }
          ],
          "type": "API::V1::User",
          "responseMessages": [
            {
              "code": 401,
              "message": "Invalid API Key"
            },
            {
              "code": 402,
              "message": "Payment Required"
            },
            {
              "code": 200,
              "message": "Success"
            }
          ]
        }
      ]
    },
    {
      "path": "/v1/users/{id}.{format}",
      "operations": [
        {
          "produces": [
            "application/json"
          ],
          "notes": "",
          "summary": "Return a specific user.",
          "nickname": "GET--version-users--id---format-",
          "httpMethod": "GET",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "<p>The requested user’s unique identifier.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": true
            }
          ],
          "type": "API::V1::User",
          "responseMessages": [
            {
              "code": 401,
              "message": "Invalid API Key"
            },
            {
              "code": 402,
              "message": "Payment Required"
            },
            {
              "code": 404,
              "message": "User not found."
            },
            {
              "code": 200,
              "message": "Success"
            }
          ]
        }
      ]
    },
    {
      "path": "/v1/users/{id}/posts.{format}",
      "operations": [
        {
          "produces": [
            "application/json"
          ],
          "notes": "",
          "summary": "Return a specific user's posts.",
          "nickname": "GET--version-users--id-posts---format-",
          "httpMethod": "GET",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "<p>The requested user’s unique identifier.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": true
            },
            {
              "paramType": "query",
              "name": "page",
              "description": "<p>Page offset to fetch.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "per_page",
              "description": "<p>Number of results to return per page.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "offset",
              "description": "<p>Pad a number of results.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            }
          ],
          "type": "API::V1::Update",
          "responseMessages": [
            {
              "code": 401,
              "message": "Invalid API Key"
            },
            {
              "code": 402,
              "message": "Payment Required"
            },
            {
              "code": 404,
              "message": "User not found."
            },
            {
              "code": 200,
              "message": "Success"
            }
          ]
        }
      ]
    },
    {
      "path": "/v1/users/{id}/newsfeed.{format}",
      "operations": [
        {
          "produces": [
            "application/json"
          ],
          "notes": "",
          "summary": "Return the newsfeed of a specific user.",
          "nickname": "GET--version-users--id-newsfeed---format-",
          "httpMethod": "GET",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "<p>The requested user’s unique identifier.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": true
            },
            {
              "paramType": "query",
              "name": "page",
              "description": "<p>Page offset to fetch.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "per_page",
              "description": "<p>Number of results to return per page.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "offset",
              "description": "<p>Pad a number of results.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            }
          ],
          "type": "API::V1::Update",
          "responseMessages": [
            {
              "code": 401,
              "message": "Invalid API Key"
            },
            {
              "code": 402,
              "message": "Payment Required"
            },
            {
              "code": 404,
              "message": "User not found."
            },
            {
              "code": 200,
              "message": "Success"
            }
          ]
        }
      ]
    },
    {
      "path": "/v1/users/{id}/unread_feed.{format}",
      "operations": [
        {
          "produces": [
            "application/json"
          ],
          "notes": "",
          "summary": "Return a user's unread posts",
          "nickname": "GET--version-users--id-unread_feed---format-",
          "httpMethod": "GET",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "<p>The requested user’s unique identifier.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": true
            },
            {
              "paramType": "query",
              "name": "page",
              "description": "<p>Page offset to fetch.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "per_page",
              "description": "<p>Number of results to return per page.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "offset",
              "description": "<p>Pad a number of results.</p>\n",
              "type": "Integer",
              "dataType": "Integer",
              "required": false
            }
          ],
          "type": "API::V1::Update",
          "responseMessages": [
            {
              "code": 401,
              "message": "Invalid API Key"
            },
            {
              "code": 402,
              "message": "Payment Required"
            },
            {
              "code": 404,
              "message": "User not found."
            },
            {
              "code": 200,
              "message": "Success"
            }
          ]
        }
      ]
    }
  ],
  "basePath": "https://api.monday.com",
  "models": {
    "API::V1::User": {
      "id": "API::V1::User",
      "name": "API::V1::User",
      "properties": {
        "url": {
          "type": "string",
          "required": true,
          "description": "The resource's URL."
        },
        "id": {
          "required": true,
          "type": "integer",
          "description": "The user's unique identifier."
        },
        "name": {
          "required": true,
          "type": "string",
          "description": "The user's name."
        },
        "email": {
          "required": true,
          "type": "string",
          "description": "The user's email."
        },
        "photo_url": {
          "required": true,
          "type": "string",
          "description": "The user's photo_url."
        },
        "title": {
          "required": true,
          "type": "string",
          "description": "The user's title."
        },
        "position": {
          "required": true,
          "type": "string",
          "description": "The user's position."
        },
        "phone": {
          "required": true,
          "type": "string",
          "description": "The user's phone."
        },
        "location": {
          "required": true,
          "type": "string",
          "description": "The user's location."
        },
        "status": {
          "required": true,
          "type": "string",
          "description": "The user's status."
        },
        "birthday": {
          "required": true,
          "type": "string",
          "description": "The user's birthday."
        },
        "is_guest": {
          "type": "boolean",
          "description": "True if the user is guest, false otherwise"
        },
        "created_at": {
          "required": true,
          "type": "DateTime in ISO8601 format",
          "description": "Creation time."
        },
        "updated_at": {
          "required": true,
          "type": "DateTime in ISO8601 format",
          "description": "Last update time."
        }
      }
    },
    "API::V1::Update": {
      "id": "API::V1::Update",
      "name": "API::V1::Update",
      "properties": {
        "user": {
          "required": true,
          "type": "object",
          "description": "User who wrote the update."
        },
        "url": {
          "type": "string",
          "required": true,
          "description": "The resource's URL."
        },
        "id": {
          "required": true,
          "type": "string",
          "description": "The update's id."
        },
        "body": {
          "required": true,
          "type": "string",
          "description": "The update's body."
        },
        "kind": {
          "required": true,
          "type": "string",
          "description": "The update's kind."
        },
        "has_assets": {
          "required": true,
          "type": "string",
          "description": "The update's has_assets."
        },
        "assets": {
          "required": true,
          "type": "string",
          "description": "The update's assets."
        },
        "created_at": {
          "required": true,
          "type": "DateTime in ISO8601 format",
          "description": "Creation time."
        },
        "updated_at": {
          "required": true,
          "type": "DateTime in ISO8601 format",
          "description": "Last update time."
        }
      }
    }
  }
}
